pipeline {
                agent any
                stages {
                    stage('Git Progress') {
            steps {
                git  branch: 'main', credentialsId: 'github_cred', url: 'https://github.com/Shin9184/mvn_test.git'
            }
        }
	
        stage('Maven Build') {
            steps {
                sh 'chmod +x ./mvnw'
                sh './mvnw -B -DskipTests clean package'
            }
        }
        stage('Maven Junit Test') {
            steps {
                sh 'chmod +x ./mvnw'
                sh './mvnw test -Dmaven.test.failure.ignore=true'
            }
        }
	
            stage('Jacoco Test') {
                steps {
                    jacoco execPattern: 'target/**.exec', runAlways: true
                }
            }
	
            stage('SonarQube analysis') {
                steps {
                    script {
                        withSonarQubeEnv() {
                            sh "./mvnw sonar:sonar"
                        }
                    }
                }
            }
	
        stage('Dockerhub Push image') {
            steps {
                script {
                    checkout scm
                    docker.withRegistry('', 'dockerhub_cred') {
                        def customImage = docker.build("tlqkddk123/spring")
                        customImage.push("${env.BUILD_ID}")
                        customImage.push("latest")
                    }
                }
            }
        }
	
            stage('Trivy Image Scan') {
                steps {
                    sh 'trivy image tlqkddk123/spring > trivy.txt'
                }
            }
	
        stage('ArgoCD Deploy') {
            steps {
                script {
                    sshagent (credentials: ['argocd']) {
                        sh "ssh -o StrictHostKeyChecking=no ec2-user@15.165.161.211 argocd repo add https://github.com/Shin9184/mvn_test.git"
                        sh "ssh -o StrictHostKeyChecking=no ec2-user@15.165.161.211 argocd app create test --repo https://github.com/Shin9184/mvn_test.git --sync-policy automated --path templates --dest-server https://kubernetes.default.svc --dest-namespace default"
                    }
                }
            }
        }
	
        stage('Arachni scanner') {
            steps {
                script {
                    sshagent (credentials: ['argocd']) {
                            sh "ssh -o StrictHostKeyChecking=no ec2-user@15.165.161.211 /home/ec2-user/arachni-1.5.1-0.5.12/bin/arachni {Add the deployed node URL here} --report-save-path=arachni.afr"
                            sh "ssh -o StrictHostKeyChecking=no ec2-user@15.165.161.211 /home/ec2-user/arachni-1.5.1-0.5.12/bin/arachni_reporter arachni.afr --reporter=json:outfile=arachni.json.zip"
                    }
                }
            }
        }
                }
            }