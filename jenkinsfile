pipeline {
                agent any
                stages {
                    stage('Git Progress') {
            steps {
                git  branch: 'main', credentialsId: 'github_cred', url: 'https://github.com/Shin9184/mvn_test.git'
            }
        }
	
        stage('Maven Build') {
            steps {
                sh 'chmod +x ./mvnw'
                sh './mvnw -B -DskipTests clean package'
            }
        }
        stage('Maven Junit Test') {
            steps {
                sh 'chmod +x ./mvnw'
                sh './mvnw test -Dmaven.test.failure.ignore=true'
            }
        }
	
            stage('Jacoco') {
                steps {
                    jacoco execPattern: 'target/**.exec', runAlways: true
                }
            }
	
            stage('SonarQube analysis') {
                steps {
                    script {
                        withSonarQubeEnv() {
                            sh "./mvnw sonar:sonar"
                        }
                    }
                }
            }
	stage('Snyk Test') {
            steps {
                snykSecurity(
                    failOnIssues: false,
                    snykInstallation: 'snyk',
                    snykTokenId: 'snyk_cred'
                )
            }
        }
	
        stage('Dockerhub Push image') {
            steps {
                script {
                    checkout scm
                    docker.withRegistry('', 'dockerhub_cred') {
                        def customImage = docker.build("tlqkddk123/spring2")
                        customImage.push("${env.BUILD_ID}")
                        customImage.push("latest")
                    }
                }
            }
        }
	
            stage ('Anchore test') {
                steps {
                    script {
                        sh 'anchore-cli --url http://13.209.98.132:8228/v1 --u admin --p foobar add registry tlqkddk123/spring2'
                        sh 'anchore-cli --url http://13.209.98.132:8228/v1 --u admin --p foobar add image tlqkddk123/spring2'
                        
                        def imageLine = 'tlqkddk123/spring2'
                        writeFile file: 'tlqkddk123/spring2', text: imageLine
                        anchore name: 'tlqkddk123/spring2', engineCredentialsId: 'anchore_cred', bailOnFail: false
                    }
                }
            }
	
            stage('Trivy Image Scan') {
                steps {
                    sh 'trivy image tlqkddk123/spring2 > trivy.txt'
                }
            }
                }
            }
