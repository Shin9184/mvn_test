pipeline {
                agent any
                stages {
                    stage('Git Progress') {
            steps {
                git  branch: 'main', credentialsId: 'github_cred', url: 'https://github.com/Shin9184/mvn_test.git'
            }
        }
	
        stage('Maven Build') {
            steps {
                sh 'chmod +x ./mvnw'
                sh './mvnw -B -DskipTests clean package'
            }
        }
        stage('Maven Junit Test') {
            steps {
                sh 'chmod +x ./mvnw'
                sh './mvnw test -Dmaven.test.failure.ignore=true'
            }
        }
	
            stage('Jacoco') {
                steps {
                    jacoco execPattern: 'target/**.exec', runAlways: true
                }
            }
	
            stage('SonarQube analysis') {
                steps {
                    script {
                        withSonarQubeEnv() {
                            sh "./mvnw sonar:sonar"
                        }
                    }
                }
            }
	
        stage('Dockerhub Push image') {
            steps {
                script {
                    checkout scm
                    docker.withRegistry('', 'dockerhub_cred') {
                        def customImage = docker.build("tlqkddk123/spring")
                        customImage.push("${env.BUILD_ID}")
                        customImage.push("latest")
                    }
                }
            }
        }
	
            stage ('Anchore test') {
                steps {
                    script {
                        def imageLine = 'tlqkddk123/spring'
                        writeFile file: 'tlqkddk123/spring', text: imageLine
                        anchore name: 'tlqkddk123/spring', engineCredentialsId: 'anchore_cred', bailOnFail: false
                    }
                }
            }
	
        stage('ArgoCD Deploy') {
            steps {
                script {
                    sshagent (credentials: ['argocd']) {
                        sh "ssh -o StrictHostKeyChecking=no ec2-user@15.164.214.244 argocd repo add https://github.com/Shin9184/mvn_test.git"
                        sh "ssh -o StrictHostKeyChecking=no ec2-user@15.164.214.244 argocd app create test --repo https://github.com/Shin9184/mvn_test.git --sync-policy automated --path templates --dest-server https://kubernetes.default.svc --dest-namespace default"
                    }
                }
            }
        }
	
        stage('Nikto scanner') {
            steps {
                script {
                    try {
                        sh '/nikto/program/./nikto.pl -host a8b61f7f9f3fc41388b090c86ee32135-852037987.ap-northeast-2.elb.amazonaws.com -o . -Format txt'
                    } catch (e) {
                        sh 'echo Succese'
                    }
                }
            }
        }
                }
            }
